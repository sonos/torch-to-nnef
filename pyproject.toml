[tool]
[tool.poetry]
name = "torch_to_nnef"
version = "0.11.3"
homepage = "https://github.com/sonos/torch-to-nnef"
description = "Any Pytorch Model to NNEF file format."
authors = ["Julien Balian <julien.balian@sonos.com>"]
readme = "README.md"
classifiers = [
    'Development Status :: 2 - Beta',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
packages = [
    { include = "torch_to_nnef" },
    { include = "tests", format = "sdist" },
]
include = ["CHANGELOG.md"]

[[tool.poetry.source]]
name = "pypi-public"
url = "https://pypi.org/simple/"

[tool.poetry.dependencies]
python = ">=3.8.0,<4.0"

# real deps {
# limited by NNEF-tools (sadly the orginal package does not keep track of it's deps)
numpy = ">=1.20.0,<2"
torch = ">=1.8.0,<3"
nnef_tools = { git = "https://github.com/KhronosGroup/NNEF-Tools.git", rev = "47b496168bd83736ad2fdf40a1193f26a4987c98" }

six = "^1.16.0" # needed for nnef_tools but deps not correctly declared
# }

nnef = { git = "https://github.com/KhronosGroup/NNEF-Tools.git", subdirectory = "parser/python", rev = "47b496168bd83736ad2fdf40a1193f26a4987c98" }
# pip install -e "git+https://github.com/KhronosGroup/NNEF-Tools.git@47b496168bd83736ad2fdf40a1193f26a4987c98#egg=nnef&subdirectory=./parser/python"


black = { version = "^22.3.0", optional = true }
flake8 = { version = "^3.9.2", optional = true }
flake8-docstrings = { version = "^1.6.0", optional = true }
isort = { version = "^5.8.0", optional = true }
mypy = { version = "^0.900", optional = true }
pytest = { version = "^6.2.4", optional = true }
pytest-cov = { version = "^2.12.0", optional = true }
sentencepiece = { version = "^0.1.97", optional = true }
toml = { version = "^0.10.2", optional = true }
torchaudio = { version = "^2.2.0", optional = true }
torchvision = { version = "^0.17.0", optional = true }
tox = { version = "^3.20.1", optional = true }
tokenizers = { version = ">=0.13.3", optional = true }
transformers = { version = "^4.35.2", optional = true }
twine = { version = "^3.3.0", optional = true }
virtualenv = { version = "^20.2.2", optional = true }

[tool.poetry.extras]
test = [
    "pytest",
    "black",
    "isort",
    "mypy",
    "flake8",
    "flake8-docstrings",
    "pytest-cov",
    "torchvision",
    "torchaudio",
    "tokenizers",
    "transformers",
    "sentencepiece",
]

[tool.poetry.group.dev.dependencies]
tox = "^3.20.1"
pre-commit = "^2.12.0"
virtualenv = "^20.2.2"
pip = "^22.3"
twine = "^3.3.0"               # ?
toml = "^0.10.2"
bump2version = "^1.0.1"
ipdb = "^0.13.9"
rich = { version = "^13.7.1" }
# pip install -e "git+https://github.com/JulienBalianSonos/ggml.git@f687a7c175a889d2502365ee484f887b4d1c77d5#egg=ggml&subdirectory=examples/python"


[tool.black]
line-length = 80
target-version = ['py38', 'py39', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
profile = "black"
line_length = 80
skip = [".gitignore", ".dockerignore"]
# you can skip files as below
#skip_glob = docs/conf.py

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest]
addopts = "-p no:warnings -s"


[tool.pylint.master]
extension-pkg-whitelist = ["torch", "numpy"]

[tool.pylint.typecheck]
ignored-modules = ["torch", "numpy"]
ignored-classes = ["torch", "numpy"]
generated-members = ["torch.*"]

[tool.pylint.format]
max-module-lines = 2000

[tool.pylint."MESSAGE CONTROL"]
disable = [
    "bad-continuation",
    "deprecated-module",
    "invalid-name",
    "len-as-condition",
    "line-too-long",
    "locally-disabled",
    "logging-fstring-interpolation",
    "no-init",
    "no-self-use",
    "not-callable",
    "protected-access",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "unused-argument",
    "unused-wildcard-import",
    "wrong-import-position",
]

[tool.pylint.DESIGN]
max-attributes = 15

[tool.mypy]
python_version = "3.8"

[[tool.mypy.overrides]]
module = "torch"
ignore_missing_imports = true
follow_imports = "skip"
follow_imports_for_stubs = true
