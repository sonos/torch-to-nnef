[tool]
[tool.poetry]
name = "torch_to_nnef"
version = "0.3.3"
homepage = "https://github.com/sonos/torch-to-nnef"
description = "Any Pytorch Model to NNEF file format."
authors = ["Julien Balian <julien.balian@sonos.com>"]
readme = "README.md"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
]
packages = [
    { include = "torch_to_nnef" },
    { include = "tests", format = "sdist" },
]
include = ["CHANGELOG.md"]

[tool.poetry.dependencies]
python = ">=3.7.0,<4.0"

# real deps {
numpy = "^1.20.0"
torch = "^1.8.0"
nnef_tools = { git = "https://github.com/KhronosGroup/NNEF-Tools.git", rev="e6733b055cebd0f5a6ab60f883f6714763ce9ec1"}
# need to wait poetry 1.2 release to support subdirectory for now use pip to install this as ad-oc deps
# pip install -e "git+https://github.com/KhronosGroup/NNEF-Tools.git@e6733b055cebd0f5a6ab60f883f6714763ce9ec1#egg=nnef&subdirectory=./parser/python"
nnef = { git = "https://github.com/DreamerMind/nnef.git", branch="main"}
# }


black  = { version = "^21.5b2", optional = true}
isort  = { version = "^5.8.0", optional = true}
flake8  = { version = "^3.9.2", optional = true}
flake8-docstrings = { version = "^1.6.0", optional = true }
mypy = {version = "^0.900", optional = true}
pytest  = { version = "^6.2.4", optional = true}
pytest-cov  = { version = "^2.12.0", optional = true}
tox  = { version = "^3.20.1", optional = true}
virtualenv  = { version = "^20.2.2", optional = true}
pip  = { version = "^20.3.1", optional = true}
twine  = { version = "^3.3.0", optional = true}
pre-commit = {version = "^2.12.0", optional = true}
toml = {version = "^0.10.2", optional = true}
bump2version = {version = "^1.0.1", optional = true}
torchvision = {version="^0.12.0", optional = true}
torchaudio = {version="^0.11.0", optional = true}
six = "^1.16.0"

[tool.poetry.extras]
test = [
    "pytest",
    "black",
    "isort",
    "mypy",
    "flake8",
    "flake8-docstrings",
    "pytest-cov",
    "torchvision",
    "torchaudio"
    ]

dev = ["tox", "pre-commit", "virtualenv", "pip", "twine", "toml", "bump2version"]


[tool.black]
line-length = 80
target-version = ['py36', 'py37', 'py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
profile = "black"
line_length = 80
skip = [".gitignore", ".dockerignore"]
# you can skip files as below
#skip_glob = docs/conf.py

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest]
addopts = "-p no:warnings -s"


[tool.pylint.master]
extension-pkg-whitelist = ["torch", "numpy"]

[tool.pylint.typecheck]
ignored-modules = ["torch", "numpy"]
ignored-classes = ["torch", "numpy"]
generated-members = [
    "torch.*",
]

[tool.pylint.format]
max-module-lines = 2000

[tool.pylint."MESSAGE CONTROL"]
disable=[
    "bad-continuation",
    "deprecated-module",
    "invalid-name",
    "len-as-condition",
    "line-too-long",
    "locally-disabled",
    "logging-fstring-interpolation",
    "no-init",
    "no-self-use",
    "not-callable",
    "protected-access",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "unused-argument",
    "unused-wildcard-import",
    "wrong-import-position",
]

[tool.pylint.DESIGN]
max-attributes = 15

[tool.mypy]
python_version = "3.7"

[[tool.mypy.overrides]]
module = "torch"
ignore_missing_imports = true
follow_imports = "skip"
follow_imports_for_stubs = true
