[project]
name = "torch_to_nnef"
version = "0.20.1"
description = "Any PyTorch Model to NNEF file format."
authors = [{ name = "Julien Balian", email = "julien.balian@sonos.com" }]
license = "MIT AND Apache-2.0"
license-files = ["LICENSE"]

# weird regression in 3.13 to address shortly
requires-python = ">=3.9.0,<4"
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
keywords = [
    "nnef",
    "pytorch",
    "torch",
    "deep learning",
    "machine learning",
    "ai",
    "llm",
    "transformers",
    "export",
    "exchange format",
]
dependencies = [
    "mako>=1.0.0,<2.0",
    "nnef>=1.0.7,<2",
    "nnef_tools>=1.0.7,<2",
    "numpy>=1.26.0,<3",
    "torch>=1.8.0,<3",
]

[project.optional-dependencies]
llm_tract = [
    "huggingface-hub>0.24",
    "protobuf>5.27",
    "sentencepiece>=0.2.0,<0.3",
    "tokenizers>=0.13.3",
    "transformers>=4.35.2,<5",
]
llm_tract_accelerate = ["accelerate"]
safetensors = ["safetensors"]
peft = ["peft"]
test = [
    "mypy~=1.13",
    "pytest-cov>=6.0.0,<7",
    "pytest>=8.3.3,<9",
    "ruff<1.0",
    "sentencepiece>=0.2.0,<0.3",
    "tokenizers>=0.13.3",
    "torchaudio>=0.9.0,<3",
    "torchvision>=0.10.0,<0.25",
    "transformers>=4.35.2,<5",
    "librosa",
    "coverage[toml]",
    "prospector",
]
[project.urls]
Homepage = "https://github.com/sonos/torch-to-nnef"

[project.scripts]
t2n_export_llm_to_tract = "torch_to_nnef.llm_tract.cli:main"
t2n_export_peft_to_nnef = "torch_to_nnef.peft.cli:main"

[project.entry-points."pygments.lexers"]
nnef = "docs.nnef_lexer:NNEFLexer"

[dependency-groups]
dev = [
    "bump2version>=1.0.1,<2",
    "ipdb>=0.13.9,<0.14",
    "mike>=2.1.3",
    "mkdocs-api-autonav==0.3.0",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-material<9.7,>=9.6",
    "mkdocs<1.7,>=1.6",
    "mkdocstrings-python<1.12,>=1.11",
    "pip~=24.0",
    "pre-commit>=2.12.0,<3",
    "rich>=13.7.1,<14",
    "toml>=0.10.2,<0.11",
    "tox>=4.23.2,<5",
    "twine>=3.3.0,<4",
    "virtualenv>=20.2.2,<21",
]

[tool.uv]

[[tool.uv.index]]
name = "pypi-public"
url = "https://pypi.org/simple/"

[tool.hatch.build.targets.sdist]
include = ["torch_to_nnef", "CHANGELOG.md"]

[tool.hatch.build.targets.wheel]
include = ["torch_to_nnef", "CHANGELOG.md"]

[build-system]
requires = ["hatchling", "setuptools>42"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 80
target-version = 'py39'

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # flake8-logging-format
    "G",
    # docstring
    "D",
]
ignore = [
    # if a docstring then ensure consistency but if it is missing do not raise issue {
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    # }
]


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--strict-markers -p no:warnings -s"
markers = [
    "ci_skip: marks tests as slow (deselect with '-m \"not ci_skip\"')",
    "serial",
]

[tool.pylint.master]
extension-pkg-whitelist = ["torch", "numpy"]

[tool.pylint.typecheck]
ignored-modules = ["torch", "numpy"]
ignored-classes = ["torch", "numpy"]
generated-members = ["torch.*"]

[tool.pylint.format]
max-module-lines = 2000

[tool.pylint."MESSAGE CONTROL"]
disable = [
    "deprecated-module",
    "invalid-name",
    "len-as-condition",
    "line-too-long",
    "locally-disabled",
    "logging-fstring-interpolation",
    "not-callable",
    "protected-access",
    "too-many-positional-arguments",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "unused-argument",
    "unused-wildcard-import",
    "wrong-import-position",
    "import-error",                  # prospector have trouble with nnef, nnef_tools
    "cyclic-import",                 # false trigger in prospector
]

[tool.pylint.DESIGN]
max-attributes = 15

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true


[[tool.mypy.overrides]]
module = "torch"
ignore_missing_imports = true
follow_imports = "skip"
follow_imports_for_stubs = true

[tool.tox]
isolated_build = true
envlist = ["py39", "py313", "format", "lint", "build"]
requires = ["tox>=4", "virtualenv>20.2", "tox-uv>1.27.0"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def main",
]

[tool.tox.env_run_base]
extras = ["test", "peft"]
passenv = ["*"]
constrain_package_deps = true
deps = ["torchvision==0.22.1"]
commands = [
    [
        "pytest",
        "-m",
        "not ci_skip",
        "-x",
        "--cov=torch_to_nnef",
        "--cov-branch",
        "--cov-report=xml",
        "--cov-report=term-missing",
        "tests",
    ],
    [
        "pytest",
        "--doctest-modules",
        "torch_to_nnef",
    ],
]
[tool.tox.env.torch_1_10]
basepython = ["python3.9"]
extras = ["test"]
constrain_package_deps = true
deps = [
    "torch==1.10.1",
    "torchvision==0.11.2",
    "torchaudio==0.10.1",
    "safetensors<=0.4.2",
    "numpy<2.0.0",
    "setuptools>0.70",
]
passenv = ["*"]
commands = [
    [
        "pytest",
        "-m",
        "not ci_skip",
        "-s",
        "--cov=torch_to_nnef",
        "--cov-branch",
        "--cov-report=xml",
        "--cov-report=term-missing",
        "tests",
    ],
    [
        "pytest",
        "--doctest-modules",
        "torch_to_nnef",
    ],
]

[tool.tox.env.torch_1_13]
basepython = ["python3.9"]
extras = ["test"]
constrain_package_deps = true
deps = [
    "torch==1.13.1",
    "torchvision==0.14.1",
    "torchaudio==0.13.1",
    "safetensors<=0.4.2",
    "numpy<2.0.0",
]
passenv = ["*"]
commands = [
    [
        "pytest",
        "-m",
        "not ci_skip",
        "-s",
        "--cov=torch_to_nnef",
        "--cov-branch",
        "--cov-report=xml",
        "--cov-report=term-missing",
        "tests",
    ],
    [
        "pytest",
        "--doctest-modules",
        "torch_to_nnef",
    ],
]


[tool.tox.env.torch_2_2]
basepython = ["python3.12"]
extras = ["test"]
constrain_package_deps = true
deps = [
    "torch==2.2.2",
    "torchvision==0.17.2",
    "torchaudio==2.2.2",
    "numpy<2.0.0",
    "safetensors<=0.4.2",
]
passenv = ["*"]
commands = [
    [
        "pytest",
        "-m",
        "not ci_skip",
        "-s",
        "--cov=torch_to_nnef",
        "--cov-branch",
        "--cov-report=xml",
        "--cov-report=term-missing",
        "{posargs:tests}",
    ],
    [
        "pytest",
        "--doctest-modules",
        "torch_to_nnef",
    ],
]

[[tool.tox.env_run_base.setenv]]
PYTHONPATH = "{toxinidir}"
PYTHONWARNINGS = "ignore"
MODELS = "1"


[tool.tox.env.format]
skip_install = true
deps = ["ruff"]
commands = [
    [
        "ruff",
        "format",
        "torch_to_nnef",
        "tests",
    ],
    [
        "ruff",
        "check",
        "--fix",
        "torch_to_nnef",
        "tests",
    ],
]

[tool.tox.env.format_check]
skip_install = true
deps = ["ruff"]
commands = [
    [
        "ruff",
        "format",
        "--check",
        "torch_to_nnef",
        "tests",
    ],
    [
        "ruff",
        "check",
        "torch_to_nnef",
        "tests",
    ],
]

[tool.tox.env.lint]
skip_install = true
deps = ["ruff"]
commands = [["ruff", "check", "-q", "torch_to_nnef", "tests"]]

[tool.tox.env.static_check]
deps = ["prospector[with_dodgy]", "pyroma"]
commands = [
    [
        "prospector",
        "--no-autodetect",
        "-X",
    ],
    [
        "pyroma",
        ".",
        "-n",
        "10",
    ],
]

# testing llm_tract cli on legacy transformers
[tool.tox.env.cli_transformers_4_50_0]
basepython = ["python3.12", "python3.13"]
extras = ["test"]
constrain_package_deps = true
deps = ["transformers==4.50.0"]
passenv = ["*"]
commands = [["pytest", "-s", "tests/test_llm_cli.py"]]

# testing llm_tract cli on 3m old transformers
[tool.tox.env.cli_transformers_4_52_0]
basepython = ["python3.12", "python3.13"]
extras = ["test"]
constrain_package_deps = true
deps = ["transformers==4.52.0"]
passenv = ["*"]
commands = [["pytest", "-s", "tests/test_llm_cli.py"]]

# testing llm_tract cli on recent transformers
[tool.tox.env.cli_transformers_4_55_0]
basepython = ["python3.12", "python3.13"]
extras = ["test"]
constrain_package_deps = true
deps = ["transformers==4.55.0"]
passenv = ["*"]
commands = [["pytest", "-s", "tests/test_llm_cli.py"]]

[tool.tox.env.build]
allowlist_externals = ["uv"]
extras = ["dev"]
commands = [["uv", "build"]]
