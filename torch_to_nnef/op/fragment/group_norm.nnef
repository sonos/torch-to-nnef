extension tract_registry tract_core;

fragment group_norm(
    input: tensor<scalar>, # input shape is [Batch, Channels, *]
    offset: tensor<scalar>,
    scale: tensor<scalar>,
    num_groups: integer,
    num_channels: integer,
    batch_size: integer,
    epsilon: scalar )
-> ( output: tensor<scalar> )
{

    tile_rep = tract_core_cast(div(num_channels, num_groups), to="i32");
    per_group_input = reshape(input, shape=[batch_size, num_groups, -1]);
    mean = sum_reduce(per_group_input, axes=[2], normalize=true);
    inv_stdvar = rsqrt(sum_reduce(sqr(per_group_input - mean), axes=[2], normalize=true) + epsilon);

    # this complicated bit allow to compute normalization per groups
    rmean = reshape(
        transpose(
            tile(
                mean,
                repeats=[tile_rep, 1, 1]
            ),
            axes=[1, 0, 2]
        ),
        shape=[batch_size, num_channels]
    );

    rinv_stdvar = reshape(
        transpose(
            tile(
                inv_stdvar,
                repeats=[tile_rep, 1, 1]
            ),
            axes=[1, 0, 2]
        ),
        shape=[batch_size, num_channels]
    );
    output = (input - rmean) * rinv_stdvar * scale + offset;
}
